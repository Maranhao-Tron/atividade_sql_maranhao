/* SQL SCRIPT - ATIVIDADE SQL + FIREBIRD */

/* DOMAINS */
CREATE DOMAIN "DM_ID" AS INTEGER;
CREATE DOMAIN "DM_STRING" AS VARCHAR(30);

/* CRIAÇÃO DE TABELAS */
CREATE TABLE PRODUTOS (
	PRO_ID DM_ID NOT NULL,
	PRO_NOME DM_STRING NOT NULL,
	PRO_DESC VARCHAR(60),
	PRO_PRECO_CUSTO NUMERIC(8,2) NOT NULL,
	PRO_PRECO_VENDA NUMERIC(8,2) NOT NULL,
	PRO_QTD INTEGER,
	PRO_FORNECEDOR DM_STRING,
	CONSTRAINT PK_PRODUTO PRIMARY KEY (PRO_ID, PRO_NOME)	
);

CREATE TABLE CLIENTES (
	CLI_ID DM_ID PRIMARY KEY,
	CLI_NOME DM_STRING NOT NULL,
	CLI_CPF_CNPJ VARCHAR(20) UNIQUE NOT NULL,
	CLI_ENDERECO VARCHAR(60),
	CLI_TELEFONE VARCHAR(13),
	CLI_EMAIL DM_STRING UNIQUE,
	CLI_DT_NASC DATE
);

CREATE TABLE VENDAS (
	VEN_ID DM_ID PRIMARY KEY,
	VEN_DATA DATE,
	VEN_CLIENTE_ID DM_ID,
	VEN_VENDEDOR DM_STRING,
	VEN_PRO_NOME DM_STRING,
	VEN_PRO_ID DM_ID,
	VEN_QTD INTEGER,
	VEN_DESCONTO NUMERIC(2),
	VEN_VALOR_TOTAL NUMERIC(8,2),
	VEN_FORMA_PGTO VARCHAR(20)
);

CREATE TABLE COMPRAS (
	CMP_ID DM_ID PRIMARY KEY,
	CMP_DATA DATE,
	CMP_FORNECEDOR DM_STRING,
	CMP_PRO_NOME DM_STRING,
	CMP_PRO_ID DM_ID,
	CMP_QTD INTEGER,
	CMP_VALOR_UNIT NUMERIC(8,2),
	CMP_VALOR_TOTAL NUMERIC(8,2),
	CMP_FORMA_PGTO VARCHAR(20),
	CMP_PRAZO_ENTREGA VARCHAR(30)
);

CREATE TABLE USERS (
	USER_ID DM_ID NOT NULL,
	USER_NAME DM_STRING NOT NULL,
	USER_EMAIL DM_STRING,
	USER_ACTIVE SMALLINT CHECK (USER_ACTIVE IN (0, 1)),
	USER_PERM_ID INTEGER NOT NULL CHECK (USER_PERM_ID IN (1, 2, 3, 4)),
	USER_PASSWORD VARCHAR(200) UNIQUE,
	PRIMARY KEY (USER_ID, USER_NAME)
);

/* DEFINIÇÃO DAS FK's NAS TABELAS */
ALTER TABLE VENDAS
ADD CONSTRAINT FK_CLI_ID
FOREIGN KEY (VEN_CLIENTE_ID)
REFERENCES CLIENTES (CLI_ID);

ALTER TABLE VENDAS
ADD CONSTRAINT FK_PRODUTO_VENDA
FOREIGN KEY (VEN_PRO_ID, VEN_PRO_NOME)
REFERENCES PRODUTOS (PRO_ID, PRO_NOME);

ALTER TABLE COMPRAS
ADD CONSTRAINT FK_PRODUTO_COMPRA
FOREIGN KEY (CMP_PRO_ID, CMP_PRO_NOME)
REFERENCES PRODUTOS (PRO_ID, PRO_NOME);

/* TRIGGER ID PRODUTO */
CREATE GENERATOR GEN_PRODUTO_ID;

CREATE TRIGGER TRG_PRO_BI FOR PRODUTOS
ACTIVE BEFORE INSERT POSITION 0
AS
BEGIN
    NEW.PRO_ID = GEN_ID(GEN_PRODUTO_ID, 1);
END

/* TRIGGER ID CLIENTE */
CREATE GENERATOR GEN_CLIENTE_ID;

CREATE TRIGGER TRG_CLI_BI FOR CLIENTES
ACTIVE BEFORE INSERT POSITION 0
AS
BEGIN
    NEW.CLI_ID = GEN_ID(GEN_CLIENTE_ID, 1);
END

/* TRIGGER ID VENDA */
CREATE GENERATOR GEN_VENDA_ID;

CREATE TRIGGER TRG_VEN_BI FOR VENDAS
ACTIVE BEFORE INSERT POSITION 0
AS
BEGIN
    NEW.VEN_ID = GEN_ID(GEN_VENDA_ID, 1);
END

/* TRIGGER ID COMPRAS */
CREATE GENERATOR GEN_COMPRA_ID;

CREATE TRIGGER TRG_CMP_BI FOR COMPRAS
ACTIVE BEFORE INSERT POSITION 0
AS
BEGIN
    NEW.CMP_ID = GEN_ID(GEN_COMPRA_ID, 1);
END

/* TRIGGER ID USER */
CREATE GENERATOR GEN_USER_ID;

CREATE TRIGGER TRG_USERS_BI FOR USERS
ACTIVE BEFORE INSERT POSITION 0
AS
BEGIN
    NEW.USER_ID = GEN_ID(GEN_USER_ID, 1);
END

/* TRIGGER PARA INSERIR DATA AUTOMATICAMENTE NA VENDA */
CREATE TRIGGER TRG_AUTO_DATA_VENDA
ACTIVE BEFORE INSERT ON VENDAS
AS
BEGIN
    IF (NEW.VEN_DATA IS NULL) THEN
        NEW.VEN_DATA = CURRENT_DATE;
END

/* TRIGGER PARA INSERIR DATA AUTOMATICAMENTE NA COMPRA */
CREATE TRIGGER TRG_AUTO_DATA_COMPRA
ACTIVE BEFORE INSERT ON COMPRAS
AS
BEGIN
    IF (NEW.CMP_DATA IS NULL) THEN
        NEW.CMP_DATA = CURRENT_DATE;
END

/* TRIGGER PARA PUXAR CAMPOS DE NOME DO PRODUTO, PREÇO TOTAL DE VENDA E CALCULAR DESCONTO */
CREATE TRIGGER TRG_CAMPOS_VENDA
ACTIVE BEFORE INSERT ON VENDAS
AS
DECLARE VARIABLE PRECO_UNITARIO NUMERIC(8,2);
BEGIN
    SELECT PRO_NOME, PRO_PRECO_VENDA
    FROM PRODUTOS
    WHERE PRO_ID = NEW.VEN_PRO_ID
    INTO NEW.VEN_PRO_NOME, PRECO_UNITARIO;

    NEW.VEN_VALOR_TOTAL = NEW.VEN_QTD * PRECO_UNITARIO;

    IF (NEW.VEN_DESCONTO > 0) THEN
    BEGIN
        NEW.VEN_VALOR_TOTAL = NEW.VEN_VALOR_TOTAL * (1 - (NEW.VEN_DESCONTO / 100.0));
    END
END

/*TRIGGER PARA PUXAR CAMPOS NOME DO PRODUTO E PREÇO TOTAL DE COMPRA*/
CREATE TRIGGER TRG_CAMPOS_COMPRA
ACTIVE BEFORE INSERT ON COMPRAS
AS
DECLARE VARIABLE PRECO_UNITARIO NUMERIC(8,2);
BEGIN
	SELECT PRO_NOME, PRO_PRECO_VENDA
	FROM PRODUTOS
	WHERE PRO_ID = NEW.CMP_PRO_ID
	INTO NEW.CMP_PRO_NOME, PRECO_UNITARIO;

	NEW.CMP_VALOR_UNIT = PRECO_UNITARIO;
	NEW.CMP_VALOR_TOTAL = NEW.CMP_QTD * PRECO_UNITARIO;
END

/* TRIGGER ATUALIZAR ESTOQUE QUANDO VENDE */
CREATE TRIGGER TRG_ATUALIZA_ESTOQUE_VENDA FOR VENDAS
ACTIVE BEFORE INSERT POSITION 0
AS
BEGIN
	UPDATE PRODUTOS
	SET PRODUTOS.PRO_QTD = PRODUTOS.PRO_QTD - NEW.VEN_QTD
	WHERE PRODUTOS.PRO_ID = NEW.VEN_PRO_ID;
END

/* TRIGGER ATUALIZAR ESTOQUE QUANDO COMPRA */
CREATE TRIGGER TRG_ATUALIZA_ESTOQUE_COMPRA FOR COMPRAS
ACTIVE BEFORE INSERT POSITION 0
AS
BEGIN
	UPDATE PRODUTOS
	SET PRODUTOS.PRO_QTD = PRODUTOS.PRO_QTD + NEW.CMP_QTD
	WHERE PRODUTOS.PRO_ID = NEW.CMP_PRO_ID;
END

/* PROCEDURE PARA ALTERAÇÃO MANUAL DE ESTOQUE */
CREATE PROCEDURE alteraEstoque (P_ID integer, P_NEW_QTD integer)
AS
BEGIN
    UPDATE PRODUTOS
    SET PRODUTOS.PRO_QTD = :P_NEW_QTD
    WHERE PRODUTOS.PRO_ID = :P_ID;
END

/* CALCULA A COMISSÃO DOS VENDEDORES DE ACORDO COM O PERÍODO INSERIDO COMO ENTRADA */
CREATE PROCEDURE CALC_COMISSAO_VENDEDORES (
    P_DATA_INICIO DATE,
    P_DATA_FIM DATE
)
RETURNS (
    NOME_VENDEDOR VARCHAR(30),
    TOTAL_VENDAS DECIMAL(12,2),
    COMISSAO DECIMAL(12,2)
)
AS
BEGIN
    FOR 
        SELECT VEN_VENDEDOR, 
               SUM(VEN_VALOR_TOTAL) AS TOTAL_VENDAS,
               SUM(VEN_VALOR_TOTAL) * 0.05 AS COMISSAO
        FROM VENDAS
        WHERE VEN_DATA BETWEEN :P_DATA_INICIO AND :P_DATA_FIM
        GROUP BY VEN_VENDEDOR
    INTO 
        :NOME_VENDEDOR,
        :TOTAL_VENDAS, 
        :COMISSAO
    DO
        SUSPEND;
END

-- SELECT * FROM CALC_COMISSAO_VENDEDORES('2025-03-01', '2025-04-02');


/* RETORNA EM ORDEM DESCRESCENTE O VALOR TOTAL DE COMPRA FEITO POR CADA CLIENTE */
CREATE PROCEDURE RANK_QTD_COMPRAS_CLIENTE()
RETURNS (
    CLIENTE_ID INTEGER,
    NOME_CLIENTE VARCHAR(50),
    QUANTIDADE_COMPRAS INTEGER,
    VALOR_TOTAL NUMERIC(8,2)
)
AS
BEGIN
    FOR
        SELECT 
            C.CLI_ID, 
            C.CLI_NOME, 
            COUNT(V.VEN_ID) AS QUANTIDADE_COMPRAS,
            SUM(V.VEN_VALOR_TOTAL) AS VALOR_TOTAL
        FROM VENDAS V
        JOIN CLIENTES C ON V.VEN_CLIENTE_ID = C.CLI_ID
        GROUP BY C.CLI_ID, C.CLI_NOME
        ORDER BY QUANTIDADE_COMPRAS DESC, VALOR_TOTAL DESC
    INTO
        :CLIENTE_ID,
        :NOME_CLIENTE,
        :QUANTIDADE_COMPRAS,
        :VALOR_TOTAL
    DO
    BEGIN
        SUSPEND;
    END
END

-- SELECT * FROM RANK_QTD_COMPRAS_CLIENTE;


/* RETORNA EM ORDEM DECRESCENTE OS A QUANTIDADE DE VEZES QUE CADA CLIENTE REALIZOU UMA COMPRA */
CREATE PROCEDURE RANK_VALOR_COMPRA_CLIENTE()
RETURNS (
    CLIENTE_ID INTEGER,
    NOME_CLIENTE VARCHAR(50),
    VALOR_TOTAL NUMERIC(8,2)
)
AS
BEGIN
    FOR
        SELECT C.CLI_ID, C.CLI_NOME, SUM(V.VEN_VALOR_TOTAL) AS VALOR_TOTAL
        FROM VENDAS V
        JOIN CLIENTES C ON V.VEN_CLIENTE_ID = C.CLI_ID
        GROUP BY C.CLI_ID, C.CLI_NOME
        ORDER BY VALOR_TOTAL DESC
    INTO
        :CLIENTE_ID,
        :NOME_CLIENTE,
        :VALOR_TOTAL
    DO
    BEGIN
        SUSPEND;
    END
END

-- SELECT * FROM RANK_VALOR_COMPRA_CLIENTE;


/* RETORNA O HISTÓRIO DE VENDA DO CLIENTE INSERIDO COMO ENTRADA (ID DO CLIENTE) */
CREATE PROCEDURE HIST_VENDAS_CLIENTE (
	P_ID_CLIENTE INTEGER
)
RETURNS (
    NOME_CLIENTE VARCHAR(50),
    VENDA_ID INTEGER,
    PRODUTO VARCHAR(30),
    VALOR_TOTAL NUMERIC(8,2),
    DATA_VENDA DATE
)
AS
BEGIN
    FOR
        SELECT C.CLI_NOME, V.VEN_ID, V.VEN_PRO_NOME, V.VEN_VALOR_TOTAL, V.VEN_DATA
        FROM VENDAS V
        JOIN CLIENTES C ON V.VEN_CLIENTE_ID = C.CLI_ID
        WHERE V.VEN_CLIENTE_ID = :P_ID_CLIENTE
        ORDER BY V.VEN_DATA DESC
    INTO :NOME_CLIENTE, :VENDA_ID, :PRODUTO, :VALOR_TOTAL, :DATA_VENDA
    DO
    BEGIN
        SUSPEND;
    END
END

-- SELECT * FROM HIST_VENDAS_CLIENTE(27);


/* RETORNA CADA FORNECEDOR E O VALOR A PAGAR PARA CADA UM BASEADO NAS COMPRAS FEITAS NO PERÍODO SELECIONADO */
CREATE PROCEDURE CONTAS_A_PAGAR(
    P_DATA_INICIO DATE,
    P_DATA_FIM DATE
)
RETURNS (
	FORNECEDOR VARCHAR(30),
	VALOR_A_PAGAR NUMERIC(8,2)
)
AS
BEGIN
	FOR
		SELECT M.CMP_FORNECEDOR, SUM(M.CMP_VALOR_TOTAL) AS VALOR_A_PAGAR
		FROM COMPRAS M
		WHERE CMP_DATA BETWEEN :P_DATA_INICIO AND :P_DATA_FIM
		GROUP BY M.CMP_FORNECEDOR
		INTO :FORNECEDOR, :VALOR_A_PAGAR
	DO
		SUSPEND;
END

-- SELECT * FROM CONTAS_A_PAGAR('2025-03-01', '2025-04-02');

/* TRIGGER PRA ATUALIZAR NOME DO PRODUTO EM VENDAS E COMPRAS (FK) */
CREATE OR ALTER TRIGGER TRG_ATUALIZA_NOME_PRODUTO
AFTER UPDATE ON PRODUTOS
AS
BEGIN
    UPDATE VENDAS
    SET VEN_PRO_NOME = NEW.PRO_NOME
    WHERE VEN_PRO_ID = NEW.PRO_ID;

    UPDATE COMPRAS
    SET CMP_PRO_NOME = NEW.PRO_NOME
    WHERE CMP_PRO_ID = NEW.PRO_ID;
END;


/* CONSULTAS */

/* RELATÓRIO SIMPLIFICADO DE VENDAS COM NOME DO CLIENTE, PRODUTO E VALOR TOTAL*/
SELECT 
    V.VEN_ID,
    V.VEN_DATA,
    C.CLI_NOME AS CLIENTE,
    P.PRO_NOME AS PRODUTO,
    V.VEN_QTD,
    V.VEN_VALOR_TOTAL
FROM VENDAS V
INNER JOIN CLIENTES C ON V.VEN_CLIENTE_ID = C.CLI_ID
INNER JOIN PRODUTOS P ON V.VEN_PRO_ID = P.PRO_ID;


/* RELATÓRIO LUCRO UNITÁRIO E LUCRO TOTAL DE VENDAS */
SELECT 
    P.PRO_ID,
    P.PRO_NOME AS PRODUTO,
    (P.PRO_PRECO_VENDA - P.PRO_PRECO_CUSTO) AS LUCRO_UNITARIO,
    (SUM(V.VEN_QTD * P.PRO_PRECO_VENDA) - SUM(C.CMP_QTD * P.PRO_PRECO_CUSTO)) AS LUCRO_TOTAL
FROM PRODUTOS P
LEFT JOIN COMPRAS C ON P.PRO_ID = C.CMP_PRO_ID
LEFT JOIN VENDAS V ON P.PRO_ID = V.VEN_PRO_ID
GROUP BY P.PRO_ID, P.PRO_NOME, P.PRO_PRECO_VENDA, P.PRO_PRECO_CUSTO
ORDER BY LUCRO_TOTAL DESC;


/* RELATÓRIO TOTAL DE COMPRAS POR PRODUTO */
SELECT 
    C.CMP_FORNECEDOR,
    P.PRO_NOME AS PRODUTO,
    SUM(C.CMP_QTD) AS QUANTIDADE_TOTAL,
    SUM(C.CMP_VALOR_TOTAL) AS VALOR_TOTAL
FROM PRODUTOS P
RIGHT JOIN COMPRAS C ON P.PRO_ID = C.CMP_PRO_ID
GROUP BY C.CMP_FORNECEDOR, P.PRO_NOME
ORDER BY P.PRO_NOME;


/* RELAÇÃO DE QTD COMPRADA X QTD VENDIDA POR PRODUTO */
SELECT 
    COALESCE(P.PRO_ID, C.CMP_PRO_ID, V.VEN_PRO_ID) AS ID_PRODUTO,
    COALESCE(P.PRO_NOME, C.CMP_PRO_NOME, V.VEN_PRO_NOME) AS PRODUTO,
    COALESCE(SUM(C.CMP_QTD), 0) AS QUANTIDADE_COMPRADA,
    COALESCE(SUM(V.VEN_QTD), 0) AS QUANTIDADE_VENDIDA
FROM PRODUTOS P
FULL JOIN COMPRAS C ON P.PRO_ID = C.CMP_PRO_ID
FULL JOIN VENDAS V ON P.PRO_ID = V.VEN_PRO_ID
GROUP BY COALESCE(P.PRO_ID, C.CMP_PRO_ID, V.VEN_PRO_ID),
         COALESCE(P.PRO_NOME, C.CMP_PRO_NOME, V.VEN_PRO_NOME)
ORDER BY ID_PRODUTO;